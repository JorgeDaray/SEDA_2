{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs20   1  \cb3\cf4 /*Equipo 4:
\par \cb1\cf0\ul0\i0\b0   2     \cb3\cf4 Munguia Guizar Marlon Uriel
\par \cb1\cf0\ul0\i0\b0   3     \cb3\cf4 Padilla Perez Jorge Daray
\par \cb1\cf0\ul0\i0\b0   4     \cb3\cf4 Perez Palacios Perla Michelle
\par \cb1\cf0\ul0\i0\b0   5     \cb3\cf4 Pulido Tobias Rafael Agustin
\par \cb1\cf0\ul0\i0\b0   6     \cb3\cf4 Seccion: D19
\par \cb1\cf0\ul0\i0\b0   7     \cb3\cf4 Calendario: 2022B
\par \cb1\cf0\ul0\i0\b0   8     \cb3\cf4 */
\par \cb1\cf0\ul0\i0\b0   9  \cb3\cf16 #include <iostream>
\par \cb1\cf0\ul0\i0\b0  10  \cb3\cf16 #include <stdio.h>
\par \cb1\cf0\ul0\i0\b0  11  \cb3\cf16 #include <stdlib.h>
\par \cb1\cf0\ul0\i0\b0  12  \cb3\cf16 #include <string.h>
\par \cb1\cf0\ul0\i0\b0  13  \cb3\cf16 #include <cstring>
\par \cb1\cf0\ul0\i0\b0  14  \cb3\cf16 #define TAMLISTA 20
\par \cb1\cf0\ul0\i0\b0  15  
\par \cb1\cf0\ul0\i0\b0  16  \cb3\cf14\b using namespace \b0\cb3\cf16\b std\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  17  
\par \cb1\cf0\ul0\i0\b0  18  \cb3\cf14\b void \b0\cb1\cf0 menu\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  19  
\par \cb1\cf0\ul0\i0\b0  20  \cb3\cf14\b struct \b0\cb1\cf0 Alumno
\par \cb1\cf0\ul0\i0\b0  21  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  22      \cb3\cf14\b char \b0\cb1\cf0 nombre\cb3\cf25 [\cb3\cf12 30\cb3\cf25 ];
\par \cb1\cf0\ul0\i0\b0  23      \cb3\cf14\b unsigned int \b0\cb1\cf0 edad\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  24      \cb3\cf14\b char \b0\cb1\cf0 sexo\cb3\cf25 [\cb3\cf12 1\cb3\cf25 ];
\par \cb1\cf0\ul0\i0\b0  25      \cb3\cf14\b unsigned int \b0\cb1\cf0 bandera\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  26      \cb3\cf4 //struct Alumno *next;
\par \cb1\cf0\ul0\i0\b0  27  \cb3\cf25 \}\cb1\cf0 datos\cb3\cf25 [\cb1\cf0 TAMLISTA\cb3\cf25 ];
\par \cb1\cf0\ul0\i0\b0  28  
\par \cb1\cf0\ul0\i0\b0  29  \cb3\cf14\b struct \b0\cb1\cf0 Lista
\par \cb1\cf0\ul0\i0\b0  30  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  31      \cb1\cf0 Alumno datos\cb3\cf25 [\cb1\cf0 TAMLISTA\cb3\cf25 ];
\par \cb1\cf0\ul0\i0\b0  32      \cb3\cf14\b void \b0\cb1\cf0 inicializa\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  33      \cb3\cf14\b bool \b0\cb1\cf0 vacia\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  34      \cb3\cf14\b bool \b0\cb1\cf0 llena\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  35      \cb3\cf14\b void \b0\cb1\cf0 insertar\cb3\cf25 (\cb3\cf14\b int \b0\cb1\cf0 pos\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0  36      \cb3\cf14\b void \b0\cb1\cf0 elimina\cb3\cf25 (\cb3\cf14\b int \b0\cb1\cf0 pos\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0  37      \cb3\cf14\b int \b0\cb1\cf0 ultimo\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  38      \cb3\cf14\b int \b0\cb1\cf0 primero\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  39      \cb3\cf14\b int \b0\cb1\cf0 guarda_m\cb3\cf25 ,\cb1\cf0 guarda_h\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  40      \cb3\cf14\b void \b0\cb1\cf0 imprimir\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  41      \cb3\cf14\b void \b0\cb1\cf0 anular\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  42      \cb3\cf14\b void \b0\cb1\cf0 burbuja_mejorada\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  43      \cb3\cf14\b bool \b0\cb1\cf0 lista_ordenada \cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  44      \cb1\cf0 Lista\cb3\cf25 ()\cb3\cf4 //Constructor
\par \cb1\cf0\ul0\i0\b0  45      \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  46          \cb1\cf0 inicializa\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  47      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  48  \cb3\cf25 \};
\par \cb1\cf0\ul0\i0\b0  49  
\par \cb1\cf0\ul0\i0\b0  50  \cb3\cf4 //Inicializa la lista con sus variables
\par \cb1\cf0\ul0\i0\b0  51  \cb3\cf14\b void \b0\cb1\cf0 Lista\cb3\cf25 ::\cb1\cf0 inicializa\cb3\cf25 ()
\par \cb1\cf0\ul0\i0\b0  52  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  53      \cb1\cf0 ultimo \cb3\cf25 = -\cb3\cf12 1\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  54      \cb1\cf0 primero \cb3\cf25 = \cb3\cf12 0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  55      \cb1\cf0 guarda_h \cb3\cf25 = \cb3\cf12 1\cb3\cf25 ,\cb1\cf0 guarda_m \cb3\cf25 = \cb3\cf12 0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  56  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  57  
\par \cb1\cf0\ul0\i0\b0  58  \cb3\cf4 //Verifica si la lista esta vacia
\par \cb1\cf0\ul0\i0\b0  59  \cb3\cf14\b bool \b0\cb1\cf0 Lista\cb3\cf25 ::\cb1\cf0 vacia\cb3\cf25 ()
\par \cb1\cf0\ul0\i0\b0  60  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  61      \cb3\cf14\b return \b0\cb1\cf0 ultimo \cb3\cf25 == -\cb3\cf12 1\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  62  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  63  
\par \cb1\cf0\ul0\i0\b0  64  \cb3\cf4 //Verifica si la lista esta llena
\par \cb1\cf0\ul0\i0\b0  65  \cb3\cf14\b bool \b0\cb1\cf0 Lista\cb3\cf25 ::\cb1\cf0 llena\cb3\cf25 ()
\par \cb1\cf0\ul0\i0\b0  66  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  67      \cb3\cf14\b return \b0\cb1\cf0 ultimo \cb3\cf25 == \cb1\cf0 TAMLISTA \cb3\cf25 - \cb3\cf12 1\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  68  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  69  
\par \cb1\cf0\ul0\i0\b0  70  \cb3\cf4 //Elimina toda la lista
\par \cb1\cf0\ul0\i0\b0  71  \cb3\cf14\b void \b0\cb1\cf0 Lista\cb3\cf25 ::\cb1\cf0 anular\cb3\cf25 ()
\par \cb1\cf0\ul0\i0\b0  72  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  73      \cb1\cf0 ultimo \cb3\cf25 = -\cb3\cf12 1\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  74  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  75  
\par \cb1\cf0\ul0\i0\b0  76  \cb3\cf4 //Inserta alumno por posicion
\par \cb1\cf0\ul0\i0\b0  77  \cb3\cf14\b void \b0\cb1\cf0 Lista\cb3\cf25 ::\cb1\cf0 insertar\cb3\cf25 (\cb3\cf14\b int \b0\cb1\cf0 pos\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0  78      \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 llena\cb3\cf25 () || \cb1\cf0 pos \cb3\cf25 < \cb3\cf12 0 \cb3\cf25 || \cb1\cf0 pos \cb3\cf25 > \cb1\cf0 ultimo \cb3\cf25 + \cb3\cf12 1\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0  79      \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  80          \cb3\cf16\b cout\b0\cb3\cf25 <<\cb3\cf20 "Ingresa un elemento consecutivo valido"\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  81          \cb3\cf14\b return\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  82      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  83      \cb3\cf14\b char \b0\cb1\cf0 cadena_h\cb3\cf25 [\cb1\cf0 TAMLISTA\cb3\cf25 ]\{\cb3\cf22 'M'\cb3\cf25 \};
\par \cb1\cf0\ul0\i0\b0  84      \cb3\cf14\b char \b0\cb1\cf0 cadena_m\cb3\cf25 [\cb1\cf0 TAMLISTA\cb3\cf25 ]\{\cb3\cf22 'F'\cb3\cf25 \};
\par \cb1\cf0\ul0\i0\b0  85      \cb3\cf4 //Recorre la posicion de la lista si ya existe para no sobreescribir
\par \cb1\cf0\ul0\i0\b0  86      \cb3\cf14\b for\b0\cb3\cf25 (\cb3\cf14\b int \b0\cb1\cf0 i \cb3\cf25 = \cb1\cf0 ultimo\cb3\cf25 +\cb3\cf12 1 \cb3\cf25 ; \cb1\cf0 i \cb3\cf25 > \cb1\cf0 pos \cb3\cf25 ; \cb1\cf0 i\cb3\cf25 -- )
\par \cb1\cf0\ul0\i0\b0  87      \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  88          \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ] = \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 i \cb3\cf25 - \cb3\cf12 1\cb3\cf25 ];
\par \cb1\cf0\ul0\i0\b0  89      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  90      \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Ingresa el nombre: "\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  91      \cb3\cf16\b cin \b0\cb3\cf25 >> \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 pos\cb3\cf25 ].\cb1\cf0 nombre\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  92      \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Ingresa la edad: "\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  93      \cb3\cf16\b cin \b0\cb3\cf25 >> \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 pos\cb3\cf25 ].\cb1\cf0 edad\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  94      \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Ingresa el sexo 'f' para femenino o 'm' para masculino: "\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  95      \cb3\cf16\b cin \b0\cb3\cf25 >> \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 pos\cb3\cf25 ].\cb1\cf0 sexo\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  96      \cb3\cf4 //0x5F Quita el 32 a nivel bits para hacer mayusculas
\par \cb1\cf0\ul0\i0\b0  97      \cb3\cf14\b if \b0\cb3\cf25 (*\cb1\cf0 datos\cb3\cf25 [\cb1\cf0 pos\cb3\cf25 ].\cb1\cf0 sexo \cb3\cf25 = ( *\cb1\cf0 datos\cb3\cf25 [\cb1\cf0 pos\cb3\cf25 ].\cb1\cf0 sexo \cb3\cf25 >= \cb3\cf22 'a' \cb3\cf25 && *\cb1\cf0 datos\cb3\cf25 [\cb1\cf0 pos\cb3\cf25 ].\cb1\cf0 sexo \cb3\cf25 <= \cb3\cf22 'z'\cb3\cf25 )? *\cb1\cf0 datos\cb3\cf25 [\cb1\cf0 pos\cb3\cf25 ].\cb1\cf0 sexo \cb3\cf25 & \cb3\cf12 0x5F \cb3\cf25 : *\cb1\cf0 datos\cb3\cf25 [\cb1\cf0 pos\cb3\cf25 ].\cb1\cf0 sexo\cb3\cf25 )\cb3\cf4 //cadena de entrada rango, entonces hace un if corto
\par \cb1\cf0\ul0\i0\b0  98      \cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  99      \cb3\cf4 //Compara si sexo es masculino o femenino
\par \cb1\cf0\ul0\i0\b0 100       \cb3\cf14\b if \b0\cb3\cf25 ( \cb1\cf0 strcmp\cb3\cf25 (\cb1\cf0 datos\cb3\cf25 [\cb1\cf0 pos\cb3\cf25 ].\cb1\cf0 sexo\cb3\cf25 , \cb1\cf0 cadena_m\cb3\cf25 ) ==\cb3\cf12 0 \cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0 101      \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 102          \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 pos\cb3\cf25 ].\cb1\cf0 bandera \cb3\cf25 = \cb1\cf0 guarda_m\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 103          \cb1\cf0 guarda_m \cb3\cf25 = \cb1\cf0 guarda_m \cb3\cf25 + \cb3\cf12 2\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 104      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 105      \cb3\cf14\b else if \b0\cb3\cf25 ( \cb1\cf0 strcmp\cb3\cf25 (\cb1\cf0 datos\cb3\cf25 [\cb1\cf0 pos\cb3\cf25 ].\cb1\cf0 sexo\cb3\cf25 , \cb1\cf0 cadena_h\cb3\cf25 ) ==\cb3\cf12 0 \cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0 106      \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 107          \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 pos\cb3\cf25 ].\cb1\cf0 bandera \cb3\cf25 = \cb1\cf0 guarda_h\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 108          \cb1\cf0 guarda_h \cb3\cf25 = \cb1\cf0 guarda_h \cb3\cf25 + \cb3\cf12 2\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 109      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 110      \cb3\cf14\b else
\par \cb1\cf0\ul0\i0\b0 111      \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 112          \cb3\cf16\b cout\b0\cb3\cf25 <<\cb3\cf20 "Ingresa un elemento valido"\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 113          \cb3\cf14\b return\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 114      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 115          \cb1\cf0 ultimo\cb3\cf25 ++;
\par \cb1\cf0\ul0\i0\b0 116  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 117  
\par \cb1\cf0\ul0\i0\b0 118  
\par \cb1\cf0\ul0\i0\b0 119  \cb3\cf14\b void \b0\cb1\cf0 Lista\cb3\cf25 ::\cb1\cf0 elimina\cb3\cf25 (\cb3\cf14\b int \b0\cb1\cf0 pos\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0 120  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 121      \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 vacia\cb3\cf25 () || \cb1\cf0 pos \cb3\cf25 < \cb3\cf12 0 \cb3\cf25 || \cb1\cf0 pos \cb3\cf25 > \cb1\cf0 ultimo \cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 122          \cb3\cf16\b cout\b0\cb3\cf25 <<\cb3\cf20 "La lista esta vacia"\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 123          \cb3\cf14\b return\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 124      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 125  
\par \cb1\cf0\ul0\i0\b0 126      \cb3\cf14\b for \b0\cb3\cf25 (\cb3\cf14\b int \b0\cb1\cf0 i \cb3\cf25 = \cb1\cf0 pos \cb3\cf25 ; \cb1\cf0 i \cb3\cf25 <= \cb1\cf0 ultimo \cb3\cf25 ; \cb1\cf0 i\cb3\cf25 ++)\{
\par \cb1\cf0\ul0\i0\b0 127      \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ] = \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 i \cb3\cf25 + \cb3\cf12 1\cb3\cf25 ];
\par \cb1\cf0\ul0\i0\b0 128      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 129      \cb1\cf0 ultimo\cb3\cf25 --;
\par \cb1\cf0\ul0\i0\b0 130  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 131  
\par \cb1\cf0\ul0\i0\b0 132  \cb3\cf14\b void \b0\cb1\cf0 Lista\cb3\cf25 ::\cb1\cf0 imprimir\cb3\cf25 ()
\par \cb1\cf0\ul0\i0\b0 133  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 134      \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 vacia\cb3\cf25 ())\{
\par \cb1\cf0\ul0\i0\b0 135          \cb3\cf16\b cout\b0\cb3\cf25 <<\cb3\cf20 "La lista esta vacia"\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 136          \cb3\cf14\b return\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 137      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 138      \cb3\cf14\b for\b0\cb3\cf25 (\cb3\cf14\b int \b0\cb1\cf0 i \cb3\cf25 = \cb1\cf0 primero \cb3\cf25 ; \cb1\cf0 i \cb3\cf25 <= \cb1\cf0 ultimo \cb3\cf25 ; \cb1\cf0 i\cb3\cf25 ++)
\par \cb1\cf0\ul0\i0\b0 139      \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 140          \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Posicion numero: "\cb3\cf25 <<\cb1\cf0 i\cb3\cf25 +\cb3\cf12 1\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 141          \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "nombre: "\cb3\cf25 <<\cb1\cf0 datos\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ].\cb1\cf0 nombre\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 142          \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "edad: "\cb3\cf25 <<\cb1\cf0 datos\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ].\cb1\cf0 edad\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 143          \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "sexo: "\cb3\cf25 <<\cb1\cf0 datos\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ].\cb1\cf0 sexo\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 144      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 145  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 146  
\par \cb1\cf0\ul0\i0\b0 147  \cb3\cf14\b bool \b0\cb1\cf0 Lista\cb3\cf25 ::\cb1\cf0 lista_ordenada\cb3\cf25 ()\{
\par \cb1\cf0\ul0\i0\b0 148      \cb3\cf14\b int \b0\cb1\cf0 j \cb3\cf25 = \cb1\cf0 primero\cb3\cf25 , \cb1\cf0 i \cb3\cf25 = \cb1\cf0 ultimo\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 149          \cb3\cf14\b while \b0\cb3\cf25 (\cb1\cf0 j \cb3\cf25 < \cb1\cf0 i\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 150              \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 datos\cb3\cf25 [\cb1\cf0 j\cb3\cf25 ].\cb1\cf0 bandera \cb3\cf25 > \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 j\cb3\cf25 +\cb3\cf12 1\cb3\cf25 ].\cb1\cf0 bandera\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 151                      \cb3\cf14\b return \b0\cb3\cf12 0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 152              \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 153              \cb1\cf0 j\cb3\cf25 ++;
\par \cb1\cf0\ul0\i0\b0 154          \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 155          \cb1\cf0 i\cb3\cf25 --;
\par \cb1\cf0\ul0\i0\b0 156      \cb3\cf14\b return \b0\cb3\cf12 1
\par \cb1\cf0\ul0\i0\b0 157      \cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 158  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 159  
\par \cb1\cf0\ul0\i0\b0 160  \cb3\cf14\b void \b0\cb1\cf0 Lista\cb3\cf25 ::\cb1\cf0 burbuja_mejorada\cb3\cf25 ()
\par \cb1\cf0\ul0\i0\b0 161  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 162      \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 vacia\cb3\cf25 ())\{
\par \cb1\cf0\ul0\i0\b0 163          \cb3\cf16\b cout\b0\cb3\cf25 <<\cb3\cf20 "La lista esta vacia"\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 164          \cb3\cf14\b return\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 165      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 166      \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 lista_ordenada\cb3\cf25 ())
\par \cb1\cf0\ul0\i0\b0 167      \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 168          \cb3\cf16\b cout\b0\cb3\cf25 <<\cb3\cf20 "La lista esta intercalada, no hace falta intercalar"\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 169          \cb3\cf14\b return\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 170      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 171          \cb3\cf14\b int \b0\cb1\cf0 i \cb3\cf25 = \cb1\cf0 ultimo\cb3\cf25 , \cb1\cf0 j\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 172          \cb1\cf0 Alumno mi_alumno\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 173          \cb3\cf14\b bool \b0\cb1\cf0 cambio\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 174          \cb3\cf14\b do\b0\cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 175              \cb1\cf0 cambio \cb3\cf25 = \cb3\cf14\b false\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 176              \cb1\cf0 j \cb3\cf25 = \cb3\cf12 0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 177              \cb3\cf14\b while \b0\cb3\cf25 (\cb1\cf0 j \cb3\cf25 < \cb1\cf0 i\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 178                  \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 datos\cb3\cf25 [\cb1\cf0 j\cb3\cf25 ].\cb1\cf0 bandera \cb3\cf25 > \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 j\cb3\cf25 +\cb3\cf12 1\cb3\cf25 ].\cb1\cf0 bandera\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 179                      \cb1\cf0 mi_alumno \cb3\cf25 = \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 j\cb3\cf25 ];
\par \cb1\cf0\ul0\i0\b0 180                      \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 j\cb3\cf25 ] = \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 j\cb3\cf25 +\cb3\cf12 1\cb3\cf25 ];
\par \cb1\cf0\ul0\i0\b0 181                      \cb1\cf0 datos\cb3\cf25 [\cb1\cf0 j\cb3\cf25 +\cb3\cf12 1\cb3\cf25 ] = \cb1\cf0 mi_alumno\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 182                      \cb1\cf0 cambio \cb3\cf25 = \cb3\cf14\b true\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 183                  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 184                  \cb1\cf0 j\cb3\cf25 ++;
\par \cb1\cf0\ul0\i0\b0 185              \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 186              \cb1\cf0 i\cb3\cf25 --;
\par \cb1\cf0\ul0\i0\b0 187          \cb3\cf25 \}\cb3\cf14\b while\b0\cb3\cf25 (\cb1\cf0 cambio\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 188          \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Alumnos intercalados correctamente"\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 189  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 190  
\par \cb1\cf0\ul0\i0\b0 191  
\par \cb1\cf0\ul0\i0\b0 192  \cb3\cf14\b int \b0\cb1\cf0 main\cb3\cf25 ()
\par \cb1\cf0\ul0\i0\b0 193  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 194      \cb1\cf0 menu\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 195      \cb3\cf14\b return \b0\cb3\cf12 0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 196  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 197  
\par \cb1\cf0\ul0\i0\b0 198  \cb3\cf14\b struct \b0\cb1\cf0 Lista mi_lista\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 199  \cb3\cf14\b void \b0\cb1\cf0 menu\cb3\cf25 ()\{
\par \cb1\cf0\ul0\i0\b0 200      \cb1\cf0 FILE \cb3\cf25 *\cb1\cf0 archivo\cb3\cf25 ;\cb3\cf4 //Creacion de archivo logico
\par \cb1\cf0\ul0\i0\b0 201      \cb1\cf0 archivo \cb3\cf25 = \cb1\cf0 fopen\cb3\cf25 (\cb3\cf20 "alumnos.dat"\cb3\cf25 ,\cb3\cf20 "w+"\cb3\cf25 );\cb3\cf4 //Creacion de archivo fisico a traves del archivo logico en modo escritura y lectura
\par \cb1\cf0\ul0\i0\b0 202      \cb3\cf14\b int \b0\cb1\cf0 i\cb3\cf25 =\cb3\cf12 0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 203      \cb3\cf14\b int \b0\cb1\cf0 opc\cb3\cf25 =\cb3\cf12 0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 204          \cb3\cf14\b while\b0\cb3\cf25 (\cb1\cf0 opc \cb3\cf25 != \cb3\cf12 4\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0 205          \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 206          \cb1\cf0 system\cb3\cf25 (\cb3\cf20 "cls"\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 207           \cb3\cf14\b int \b0\cb1\cf0 pos\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 208           \cb3\cf14\b char \b0\cb1\cf0 cambio\cb3\cf25 [\cb3\cf12 5\cb3\cf25 ];
\par \cb1\cf0\ul0\i0\b0 209              \cb3\cf16\b cout\b0\cb3\cf25 <<\cb3\cf20 " Menú - Sistema Control Escolar"\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 210              \cb3\cf16\b cout\b0\cb3\cf25 <<\cb3\cf20 "1) Insertar alumnos"\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 211              \cb3\cf16\b cout\b0\cb3\cf25 <<\cb3\cf20 "2) Mostrar todos los alumnos"\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 212              \cb3\cf16\b cout\b0\cb3\cf25 <<\cb3\cf20 "3) Transformar la lista original (Intercalar)"\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 213              \cb3\cf16\b cout\b0\cb3\cf25 <<\cb3\cf20 "4) Salir"\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 214              \cb3\cf16\b cout\b0\cb3\cf25 <<\cb3\cf20 "Seleccione opcion:"\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 215              \cb3\cf16\b cin\b0\cb3\cf25 >>\cb1\cf0 opc\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 216              \cb3\cf14\b switch\b0\cb3\cf25 (\cb1\cf0 opc\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0 217              \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 218                  \cb3\cf14\b case \b0\cb3\cf12 1\cb3\cf25 :
\par \cb1\cf0\ul0\i0\b0 219                  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 220                      \cb1\cf0 system\cb3\cf25 (\cb3\cf20 "cls"\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 221                      \cb1\cf0 fflush\cb3\cf25 (\cb1\cf0 stdin\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 222                      \cb3\cf16\b cout\b0\cb3\cf25 <<\cb3\cf20 "En que posicion desea insertar el alumno?, Inicio en 1."\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 223                      \cb1\cf0 gets\cb3\cf25 (\cb1\cf0 cambio\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 224                      \cb1\cf0 pos \cb3\cf25 = \cb1\cf0 atoi\cb3\cf25 (\cb1\cf0 cambio\cb3\cf25 );\cb3\cf4 //atoi convierte de char* a int, si no hay un entero lo pasa a 0 por default.
\par \cb1\cf0\ul0\i0\b0 225                      \cb1\cf0 pos \cb3\cf25 = \cb1\cf0 pos\cb3\cf25 -\cb3\cf12 1\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 226                      \cb1\cf0 mi_lista\cb3\cf25 .\cb1\cf0 insertar\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 227                      \cb1\cf0 i\cb3\cf25 ++;
\par \cb1\cf0\ul0\i0\b0 228                      \cb1\cf0 system\cb3\cf25 (\cb3\cf20 "pause"\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 229                  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 230                  \cb3\cf14\b break\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 231                  \cb3\cf14\b case \b0\cb3\cf12 2\cb3\cf25 :
\par \cb1\cf0\ul0\i0\b0 232                  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 233                      \cb1\cf0 system\cb3\cf25 (\cb3\cf20 "cls"\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 234                      \cb1\cf0 mi_lista\cb3\cf25 .\cb1\cf0 imprimir\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 235                      \cb1\cf0 system\cb3\cf25 (\cb3\cf20 "pause"\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 236                  \cb3\cf25 \}\cb3\cf14\b break\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 237                  \cb3\cf14\b case \b0\cb3\cf12 3\cb3\cf25 :
\par \cb1\cf0\ul0\i0\b0 238                  \cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 239                      \cb1\cf0 system\cb3\cf25 (\cb3\cf20 "cls"\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 240                      \cb1\cf0 mi_lista\cb3\cf25 .\cb1\cf0 burbuja_mejorada\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 241                      \cb1\cf0 system\cb3\cf25 (\cb3\cf20 "pause"\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 242                  \cb3\cf25 \}\cb3\cf14\b break\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 243                  \cb3\cf14\b case \b0\cb3\cf12 4\cb3\cf25 :\cb3\cf14\b break\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 244  
\par \cb1\cf0\ul0\i0\b0 245                  \cb3\cf14\b default\b0\cb3\cf25 :
\par \cb1\cf0\ul0\i0\b0 246                      \cb3\cf16\b cout\b0\cb3\cf25 <<\cb3\cf20 "La opcion: "\cb3\cf25 <<\cb1\cf0 opc\cb3\cf25 <<\cb3\cf20 "No existe"\cb3\cf25 <<\cb3\cf16\b endl\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 247              \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 248          \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 249  
\par \cb1\cf0\ul0\i0\b0 250          \cb3\cf14\b if \b0\cb3\cf25 (\cb1\cf0 archivo\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 251              \cb1\cf0 fwrite\cb3\cf25 (\cb3\cf14\b reinterpret_cast \b0\cb3\cf25 <\cb3\cf14\b const char\b0\cb3\cf25 *> (&\cb1\cf0 mi_lista\cb3\cf25 ),\cb3\cf14\b sizeof\b0\cb3\cf25 (\cb3\cf14\b struct \b0\cb1\cf0 Alumno\cb3\cf25 ),\cb1\cf0 i\cb3\cf25 ,\cb1\cf0 archivo\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 252              \cb1\cf0 fclose\cb3\cf25 (\cb1\cf0 archivo\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 253          \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 254  \cb3\cf25 \}
\par }